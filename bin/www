#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app")
const debug = require("debug")("pizzariarest:server")
const mongoose = require("mongoose")
const https = require("https")
const fs = require("fs")

/**
 * Get database name from environment.
 */
const dbname = process.env.DBNAME || "pizzariarest"

/**
 * Get port from environment and store in Express.
 */

// Porta 3443
const port = normalizePort(process.env.PORT || "3000")
app.set("port", port + 443)

// Definindo as chaves e certificados gerados
const opts = {
  key: fs.readFileSync(`${__dirname}/privat.key`),
  cert: fs.readFileSync(`${__dirname}/certificate.pem`)
}
const server = https.createServer(opts, app)

/**
 * Create HTTP server.
 */

/**
 * Connect to mongoDB then listen on provided port
 * on all network interfaces.
 */

mongoose
  .connect(`mongodb://localhost:27017/${dbname}`, {
    useNewUrlParser: true,
    useFindAndModify: false,
    useCreateIndex: true,
    useUnifiedTopology: true
  })
  .then(() => {
    debug("connected to mongodb")
    server.listen(app.get('port'))  // https://localhost:3443/
  })
  .catch(console.error)

server.on("error", onError)
server.on("listening", onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
  debug("Listening on " + bind)
}
